{
  
    
        "post0": {
            "title": "",
            "content": "import pandas as pd import altair as alt . The number of deadths per day from 2008 until 2018 can obtained from Statbel: . df = pd.read_excel(&#39;https://statbel.fgov.be/sites/default/files/files/opendata/bevolking/TF_DEATHS.xlsx&#39;) # , skiprows=5, sheet_name=sheetnames . df.head() . DT_DATE MS_NUM_DEATHS . 0 2008-01-01 | 342 | . 1 2008-01-02 | 348 | . 2 2008-01-03 | 340 | . 3 2008-01-04 | 349 | . 4 2008-01-05 | 348 | . df[&#39;Jaar&#39;] = df[&#39;DT_DATE&#39;].dt.year df[&#39;Dag&#39;] = df[&#39;DT_DATE&#39;].dt.dayofyear . df_plot = df.groupby(&#39;Dag&#39;)[&#39;MS_NUM_DEATHS&#39;].mean().to_frame().reset_index() . # Let&#39;s make a quick plot alt.Chart(df_plot).mark_line().encode(x=&#39;Dag&#39;, y=&#39;MS_NUM_DEATHS&#39;).properties(width=600) . The John Hopkings University CSSE keeps track of the number of covid-19 deadths per day and county on the a github reposotry: https://github.com/CSSEGISandData/COVID-19 . # Obtain the data deaths_url = &#39;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv&#39; deaths = pd.read_csv(deaths_url, sep=&#39;,&#39;) . # Filter out Belgium deaths_be = deaths[deaths[&#39;Country/Region&#39;] == &#39;Belgium&#39;] . deaths_be . Province/State Country/Region Lat Long 1/22/20 1/23/20 1/24/20 1/25/20 1/26/20 1/27/20 1/28/20 1/29/20 1/30/20 1/31/20 2/1/20 2/2/20 2/3/20 2/4/20 2/5/20 2/6/20 2/7/20 2/8/20 2/9/20 2/10/20 2/11/20 2/12/20 2/13/20 2/14/20 2/15/20 2/16/20 2/17/20 2/18/20 2/19/20 2/20/20 2/21/20 2/22/20 2/23/20 2/24/20 2/25/20 2/26/20 ... 3/9/20 3/10/20 3/11/20 3/12/20 3/13/20 3/14/20 3/15/20 3/16/20 3/17/20 3/18/20 3/19/20 3/20/20 3/21/20 3/22/20 3/23/20 3/24/20 3/25/20 3/26/20 3/27/20 3/28/20 3/29/20 3/30/20 3/31/20 4/1/20 4/2/20 4/3/20 4/4/20 4/5/20 4/6/20 4/7/20 4/8/20 4/9/20 4/10/20 4/11/20 4/12/20 4/13/20 4/14/20 4/15/20 4/16/20 4/17/20 . 23 NaN | Belgium | 50.8333 | 4.0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 | ... | 0 | 0 | 3 | 3 | 3 | 4 | 4 | 5 | 10 | 14 | 21 | 37 | 67 | 75 | 88 | 122 | 178 | 220 | 289 | 353 | 431 | 513 | 705 | 828 | 1011 | 1143 | 1283 | 1447 | 1632 | 2035 | 2240 | 2523 | 3019 | 3346 | 3600 | 3903 | 4157 | 4440 | 4857 | 5163 | . 1 rows × 91 columns . # Create dateframe for plotting df_deaths = pd.DataFrame(data={&#39;Datum&#39;:pd.to_datetime(deaths_be.columns[4:]), &#39;Overlijdens&#39;:deaths_be.iloc[0].values[4:]}) . # Check for Nan&#39;s df_deaths[&#39;Overlijdens&#39;].isna().sum() . 0 . # Convert to integer df_deaths[&#39;Overlijdens&#39;] = df_deaths[&#39;Overlijdens&#39;].astype(int) . # Add day of the year to the dataframe df_deaths[&#39;Dag&#39;] = df_deaths[&#39;Datum&#39;].dt.dayofyear . # Plot the data dead_2008_2018 = alt.Chart(df_plot).mark_line().encode(x=&#39;Dag&#39;, y=&#39;MS_NUM_DEATHS&#39;) . df_deaths[&#39;Nieuwe covid-19 Sterfgevallen&#39;] = df_deaths[&#39;Overlijdens&#39;].diff() . # Check types df_deaths.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 87 entries, 0 to 86 Data columns (total 4 columns): # Column Non-Null Count Dtype -- -- 0 Datum 87 non-null datetime64[ns] 1 Overlijdens 87 non-null int64 2 Dag 87 non-null int64 3 Nieuwe covid-19 Sterfgevallen 86 non-null float64 dtypes: datetime64[ns](1), float64(1), int64(2) memory usage: 2.8 KB . # Plot covid-19 deaths in Belgium according to JHU CSSE dead_covid= alt.Chart(df_deaths).mark_line(point=True).encode(x=alt.X(&#39;Dag&#39;,scale=alt.Scale(domain=(1, 110), clamp=True)), y=&#39;Nieuwe covid-19 Sterfgevallen&#39;, color=alt.ColorValue(&#39;red&#39;), tooltip=[&#39;Dag&#39;, &#39;Nieuwe covid-19 Sterfgevallen&#39;]) dead_covid . # add average deaths per day in the last 10 year dead_2008_2018 + dead_covid . df.head() . DT_DATE MS_NUM_DEATHS Jaar Dag . 0 2008-01-01 | 342 | 2008 | 1 | . 1 2008-01-02 | 348 | 2008 | 2 | . 2 2008-01-03 | 340 | 2008 | 3 | . 3 2008-01-04 | 349 | 2008 | 4 | . 4 2008-01-05 | 348 | 2008 | 5 | . df[&#39;Datum&#39;] = pd.to_datetime(df[&#39;DT_DATE&#39;]) . line = alt.Chart(df).mark_line().encode( x=alt.X(&#39;Dag&#39;, scale=alt.Scale( domain=(1, 120), clamp=True )), y=&#39;mean(MS_NUM_DEATHS)&#39; ) # Bootstrapped 95% confidence interval band = alt.Chart(df).mark_errorband(extent=&#39;ci&#39;).encode( x=alt.X(&#39;Dag&#39;, scale=alt.Scale(domain=(1, 120), clamp=True)), y=alt.Y(&#39;MS_NUM_DEATHS&#39;, title=&#39;Overlijdens per dag&#39;), ) dead_covid= alt.Chart(df_deaths).mark_line(point=True).encode( x=alt.X(&#39;Dag&#39;,scale=alt.Scale(domain=(1, 120), clamp=True)), y=&#39;Nieuwe covid-19 Sterfgevallen&#39;, color=alt.ColorValue(&#39;red&#39;), tooltip=[&#39;Dag&#39;, &#39;Nieuwe covid-19 Sterfgevallen&#39;, &#39;Datum&#39;] ) (band + line + dead_covid).properties(width=1024, title=&#39;Gemiddeld aantal overlijdens over 10 jaar versus overlijdens door covid-19 in Belgie&#39;) . Source date from sciensano . df_sc = pd.read_csv(&#39;https://epistat.sciensano.be/Data/COVID19BE_MORT.csv&#39;) . df_sc.head() . DATE REGION AGEGROUP SEX DEATHS . 0 2020-03-10 | Brussels | 85+ | F | 1 | . 1 2020-03-11 | Flanders | 85+ | F | 1 | . 2 2020-03-11 | Brussels | 75-84 | M | 1 | . 3 2020-03-11 | Brussels | 85+ | F | 1 | . 4 2020-03-12 | Brussels | 75-84 | M | 1 | . df_dead_day = df_sc.groupby(&#39;DATE&#39;)[&#39;DEATHS&#39;].sum().reset_index() df_dead_day[&#39;Datum&#39;] = pd.to_datetime(df_dead_day[&#39;DATE&#39;]) df_dead_day[&#39;Dag&#39;] = df_dead_day[&#39;Datum&#39;].dt.dayofyear . line = alt.Chart(df).mark_line().encode( x=alt.X(&#39;Dag&#39;, scale=alt.Scale( domain=(1, 120), clamp=True )), y=&#39;mean(MS_NUM_DEATHS)&#39; ) # Bootstrapped 95% confidence interval band = alt.Chart(df).mark_errorband(extent=&#39;ci&#39;).encode( x=alt.X(&#39;Dag&#39;, scale=alt.Scale(domain=(1, 120), clamp=True)), y=alt.Y(&#39;MS_NUM_DEATHS&#39;, title=&#39;Overlijdens per dag&#39;), ) dead_covid= alt.Chart(df_dead_day).mark_line(point=True).encode( x=alt.X(&#39;Dag&#39;,scale=alt.Scale(domain=(1, 120), clamp=True)), y=&#39;DEATHS&#39;, color=alt.ColorValue(&#39;red&#39;), tooltip=[&#39;Dag&#39;, &#39;DEATHS&#39;, &#39;Datum&#39;] ) (band + line + dead_covid).properties(width=1024, title=&#39;Gemiddeld aantal overlijdens over 10 jaar versus overlijdens door covid-19 in Belgie&#39;) . Obtain more detail . df_tot_sc = pd.read_excel(&#39;https://epistat.sciensano.be/Data/COVID19BE.xlsx&#39;) . df_tot_sc . DATE PROVINCE REGION AGEGROUP SEX CASES . 0 2020-03-01 | Brussels | Brussels | 10-19 | M | 1 | . 1 2020-03-01 | Brussels | Brussels | 10-19 | F | 1 | . 2 2020-03-01 | Brussels | Brussels | 20-29 | M | 1 | . 3 2020-03-01 | Brussels | Brussels | 30-39 | F | 1 | . 4 2020-03-01 | Brussels | Brussels | 40-49 | F | 1 | . ... ... | ... | ... | ... | ... | ... | . 6693 NaN | OostVlaanderen | Flanders | NaN | F | 4 | . 6694 NaN | VlaamsBrabant | Flanders | 40-49 | M | 3 | . 6695 NaN | VlaamsBrabant | Flanders | 40-49 | F | 2 | . 6696 NaN | VlaamsBrabant | Flanders | 50-59 | M | 1 | . 6697 NaN | WestVlaanderen | Flanders | 50-59 | M | 3 | . 6698 rows × 6 columns .",
            "url": "https://fastpages.fast.ai/2020/04/18/2020-04-18-deads-2008-2018-vs-covid.html",
            "relUrl": "/2020/04/18/2020-04-18-deads-2008-2018-vs-covid.html",
            "date": " • Apr 18, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Evolution of burglary in Leuven. Is the trend downwards ?",
            "content": "The local police shared a graph with the number of break-ins in Leuven per year. The article shows a graph with a downwards trendline. Can we conclude that the number of breakins is showing a downward trend based on those numbers? Let&#39;s construct a dataframe with the data from the graph. . import numpy as np import pandas as pd import altair as alt df = pd.DataFrame({&#39;year_int&#39;:[y for y in range(2006, 2020)], &#39;breakins&#39;:[1133,834,953,891,1006,1218,992,1079,1266,1112,713,669,730,644]}) df[&#39;year&#39;] = pd.to_datetime(df[&#39;year_int&#39;], format=&#39;%Y&#39;) . points = alt.Chart(df).mark_line(point=True).encode( x=&#39;year&#39;, y=&#39;breakins&#39;, tooltip=&#39;breakins&#39; ) points + points.transform_regression(&#39;year&#39;, &#39;breakins&#39;).mark_line( color=&#39;green&#39; ).properties( title=&#39;Regression trend on the number breakins per year in Leuven&#39; ) . The article claims that the number of breakins stabilizes the last years. Let&#39;s perform a local regression to check that. . # https://opendatascience.com/local-regression-in-python # Loess: https://gist.github.com/AllenDowney/818f6153ef316aee80467c51faee80f8 points + points.transform_loess(&#39;year&#39;, &#39;breakins&#39;).mark_line( color=&#39;green&#39; ).properties( title=&#39;Local regression trend on the number breakins per year in Leuven&#39; ) . But what about the trend line? Are we sure the trend is negative ? Bring in the code based on the blogpost The hacker&#39;s guide to uncertainty estimates to estimate the uncertainty.: . # Code from: https://erikbern.com/2018/10/08/the-hackers-guide-to-uncertainty-estimates.html import scipy.optimize import random def model(xs, k, m): return k * xs + m def neg_log_likelihood(tup, xs, ys): # Since sigma &gt; 0, we use use log(sigma) as the parameter instead. # That way we have an unconstrained problem. k, m, log_sigma = tup sigma = np.exp(log_sigma) delta = model(xs, k, m) - ys return len(xs)/2*np.log(2*np.pi*sigma**2) + np.dot(delta, delta) / (2*sigma**2) def confidence_bands(xs, ys, nr_bootstrap): curves = [] xys = list(zip(xs, ys)) for i in range(nr_bootstrap): # sample with replacement bootstrap = [random.choice(xys) for _ in xys] xs_bootstrap = np.array([x for x, y in bootstrap]) ys_bootstrap = np.array([y for x, y in bootstrap]) k_hat, m_hat, log_sigma_hat = scipy.optimize.minimize( neg_log_likelihood, (0, 0, 0), args=(xs_bootstrap, ys_bootstrap) ).x curves.append( model(xs, k_hat, m_hat) + # Note what&#39;s going on here: we&#39;re _adding_ the random term # to the predictions! np.exp(log_sigma_hat) * np.random.normal(size=xs.shape) ) lo, hi = np.percentile(curves, (2.5, 97.5), axis=0) return lo, hi . # Make a plot with a confidence band df[&#39;lo&#39;], df[&#39;hi&#39;] = confidence_bands(df.index, df[&#39;breakins&#39;], 100) ci = alt.Chart(df).mark_area().encode( x=alt.X(&#39;year:T&#39;, title=&#39;&#39;), y=alt.Y(&#39;lo:Q&#39;), y2=alt.Y2(&#39;hi:Q&#39;, title=&#39;&#39;), color=alt.value(&#39;lightblue&#39;), opacity=alt.value(0.6) ) chart = alt.Chart(df).mark_line(point=True).encode( x=&#39;year&#39;, y=&#39;breakins&#39;, tooltip=&#39;breakins&#39; ) ci + chart + chart.transform_regression(&#39;year&#39;, &#39;breakins&#39;).mark_line( color=&#39;red&#39; ).properties( title=&#39;95% Confidence band of the number of breakins per year in Leuven&#39; ) . On the above chart, we see that a possitive trend might be possible as well. . Linear regression&#182; . Let&#39;s perform a linear regression with statsmodel to calculate the confidence interval on the slope of the regression line. . import statsmodels.formula.api as smf . results = smf.ols(&#39;breakins ~ index&#39;, data=df.reset_index()).fit() . results.params . Intercept 1096.314286 index -23.169231 dtype: float64 . The most likely slope of the trend line is 23.17 breakins per year. But how sure are we that the trend is heading down ? . results.summary() . /usr/local/lib/python3.6/dist-packages/scipy/stats/stats.py:1535: UserWarning: kurtosistest only valid for n&gt;=20 ... continuing anyway, n=14 &#34;anyway, n=%i&#34; % int(n)) . OLS Regression Results Dep. Variable: breakins | R-squared: 0.223 | . Model: OLS | Adj. R-squared: 0.159 | . Method: Least Squares | F-statistic: 3.451 | . Date: Sat, 15 Feb 2020 | Prob (F-statistic): 0.0879 | . Time: 17:09:53 | Log-Likelihood: -92.105 | . No. Observations: 14 | AIC: 188.2 | . Df Residuals: 12 | BIC: 189.5 | . Df Model: 1 | | . Covariance Type: nonrobust | | . | coef std err t P&gt;|t| [0.025 0.975] . Intercept 1096.3143 | 95.396 | 11.492 | 0.000 | 888.465 | 1304.164 | . index -23.1692 | 12.472 | -1.858 | 0.088 | -50.344 | 4.006 | . Omnibus: 1.503 | Durbin-Watson: 1.035 | . Prob(Omnibus): 0.472 | Jarque-Bera (JB): 1.196 | . Skew: 0.577 | Prob(JB): 0.550 | . Kurtosis: 2.153 | Cond. No. 14.7 | . Warnings:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified. The analysis reveals that the slope of the best fitting regression line is 23 breakins less per year. However, the confidence interval of the trend is between -50.344 and 4.006. Also the p)value of the regression coefficient is 0.088. Meaning we have eight percent chance that the negative trend is by accident. Hence, based on the current data we are not 95% percent sure the trend is downwards. Hence we can not conclude, based on this data, that there is a negative trend. This corresponds with the width of the 95% certainty band drawn that allows for an upward trend line: . # Here are the confidence intervals of the regression results.conf_int() . 0 1 . Intercept 888.464586 | 1304.163986 | . index -50.344351 | 4.005889 | . y_low = results.params[&#39;Intercept&#39;] # ?ost likely value of the intercept y_high = results.params[&#39;Intercept&#39;] + results.conf_int()[1][&#39;index&#39;] * df.shape[0] # Value of upward trend for the last year df_upward_trend = pd.DataFrame({&#39;year&#39;:[df[&#39;year&#39;].min(), df[&#39;year&#39;].max()], &#39;breakins&#39;:[y_low, y_high]}) possible_upwards_trend = alt.Chart(df_upward_trend).mark_line( color=&#39;green&#39;, strokeDash=[10,10] ).encode( x=&#39;year:T&#39;, y=alt.Y(&#39;breakins:Q&#39;, title=&#39;Number of breakins per year&#39;) ) points = alt.Chart(df).mark_line(point=True).encode(x=&#39;year&#39;, y=&#39;breakins&#39;, tooltip=&#39;breakins&#39;) (ci + points + points.transform_regression(&#39;year&#39;, &#39;breakins&#39;).mark_line(color=&#39;red&#39;) + possible_upwards_trend).properties( title=&#39;Trend analysis on the number of breakins per year in Leuven, Belgium&#39; ) . In the above graph, we see that a slight positive trend (green dashed line) is in the 95% confidence band on the regression coefficient. We are not sure that the trend on the number of breakins is downwards. .",
            "url": "https://fastpages.fast.ai/2020/02/15/breakins.html",
            "relUrl": "/2020/02/15/breakins.html",
            "date": " • Feb 15, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Simple Notebook",
            "content": "Test fast template notebook posts . import altair as alt . Make an Altair graph . from vega_datasets import data iris = data.iris() alt.Chart(iris).mark_point().encode( x=&#39;petalLength&#39;, y=&#39;petalWidth&#39;, color=&#39;species&#39;, tooltip=&#39;species&#39; ).interactive() . Enjoy :) .",
            "url": "https://fastpages.fast.ai/2020/01/28/Altair.html",
            "relUrl": "/2020/01/28/Altair.html",
            "date": " • Jan 28, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Bullet chart",
            "content": "In the article &quot;Bullet Charts - What Is It And How To Use It&quot; I learned about Bullet charts. It&#39;s a specific kind of barchart that must convey the state of a measure or KPI. The goal is to see in a glance if the target is met. Here is an example bullet chart from the article: . # This causes problems: # ![Example Bullet Chart](https://jscharting.com/blog/bullet-charts/images/bullet_components.png) . Below is some Python code that generates bullets graphs using the Altair library. . import altair as alt import pandas as pd df = pd.DataFrame.from_records([ {&quot;title&quot;:&quot;Revenue&quot;,&quot;subtitle&quot;:&quot;US$, in thousands&quot;,&quot;ranges&quot;:[150,225,300],&quot;measures&quot;:[220,270],&quot;markers&quot;:[250]}, {&quot;title&quot;:&quot;Profit&quot;,&quot;subtitle&quot;:&quot;%&quot;,&quot;ranges&quot;:[20,25,30],&quot;measures&quot;:[21,23],&quot;markers&quot;:[26]}, {&quot;title&quot;:&quot;Order Size&quot;,&quot;subtitle&quot;:&quot;US$, average&quot;,&quot;ranges&quot;:[350,500,600],&quot;measures&quot;:[100,320],&quot;markers&quot;:[550]}, {&quot;title&quot;:&quot;New Customers&quot;,&quot;subtitle&quot;:&quot;count&quot;,&quot;ranges&quot;:[1400,2000,2500],&quot;measures&quot;:[1000,1650],&quot;markers&quot;:[2100]}, {&quot;title&quot;:&quot;Satisfaction&quot;,&quot;subtitle&quot;:&quot;out of 5&quot;,&quot;ranges&quot;:[3.5,4.25,5],&quot;measures&quot;:[3.2,4.7],&quot;markers&quot;:[4.4]} ]) alt.layer( alt.Chart().mark_bar(color=&#39;#eee&#39;).encode(alt.X(&quot;ranges[2]:Q&quot;, scale=alt.Scale(nice=False), title=None)), alt.Chart().mark_bar(color=&#39;#ddd&#39;).encode(x=&quot;ranges[1]:Q&quot;), alt.Chart().mark_bar(color=&#39;#bbb&#39;).encode(x=&quot;ranges[0]:Q&quot;), alt.Chart().mark_bar(color=&#39;steelblue&#39;, size=10).encode(x=&#39;measures[0]:Q&#39;), alt.Chart().mark_tick(color=&#39;black&#39;, size=12).encode(x=&#39;markers[0]:Q&#39;), data=df ).facet( row=alt.Row(&quot;title:O&quot;, title=&#39;&#39;) ).resolve_scale( x=&#39;independent&#39; ) .",
            "url": "https://fastpages.fast.ai/2020/01/27/bullet-chart-altair.html",
            "relUrl": "/2020/01/27/bullet-chart-altair.html",
            "date": " • Jan 27, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "Trying to blog with notebooks",
            "content": "Today I tried to set up the github pages blog to be able to blog with notebooks. There’s a 2020-01-26-bullet-chart-altair.ipynb in the _notebooks directory but I does not generate a post yet. . I keep on debugging. . I appears that you have to add ‘/sync’ to commit message. . At least the convertion process has triggered: https://github.com/cast42/cast42.github.io/runs/409790938 .",
            "url": "https://fastpages.fast.ai/2020/01/25/trying-to-blog-with-notebooks.html",
            "relUrl": "/2020/01/25/trying-to-blog-with-notebooks.html",
            "date": " • Jan 25, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "Plotting regression line with confidence bands in Altair 4",
            "content": "I’m a big fan of Altair created by Jake Vanderplas. It’s a python library that allows for declarative visualisation. In Version 4, a regression transform is added that makes it easy to draw a regression line on a scatter plot. The example from the Altair website: . import altair as alt import pandas as pd import numpy as np np.random.seed(42) x = np.linspace(0, 10) y = x - 5 + np.random.randn(len(x)) df = pd.DataFrame({&#39;x&#39;: x, &#39;y&#39;: y}) chart = alt.Chart(df).mark_point().encode( x=&#39;x&#39;, y=&#39;y&#39; ) chart + chart.transform_regression(&#39;x&#39;, &#39;y&#39;).mark_line() . . Even higher order regression lines are possible. . To calculate the confidence band of the regression, I used the Python code from a blogpost titled the hackers guide to uncertainty estimates written by Erik Bernhardsson . First we need a helper function that calculates the negative logarithmic likelihood: . import scipy.optimize import random def model(xs, k, m): return k * xs + m def neg_log_likelihood(tup, xs, ys): # Since sigma &gt; 0, we use use log(sigma) as the parameter instead. # That way we have an unconstrained problem. k, m, log_sigma = tup sigma = np.exp(log_sigma) delta = model(xs, k, m) - ys return len(xs)/2*np.log(2*np.pi*sigma**2) + np.dot(delta, delta) / (2*sigma**2) . Next, we define a function that calculates the upper and lower confidence bands of the regression using bootstrapping. . def confidence_bands(xs, ys, nr_bootstrap): curves = [] xys = list(zip(xs, ys)) for i in range(nr_bootstrap): # sample with replacement bootstrap = [random.choice(xys) for _ in xys] xs_bootstrap = np.array([x for x, y in bootstrap]) ys_bootstrap = np.array([y for x, y in bootstrap]) k_hat, m_hat, log_sigma_hat = scipy.optimize.minimize( neg_log_likelihood, (0, 0, 0), args=(xs_bootstrap, ys_bootstrap) ).x curves.append( model(xs, k_hat, m_hat) + # Note what&#39;s going on here: we&#39;re _adding_ the random term # to the predictions! np.exp(log_sigma_hat) * np.random.normal(size=xs.shape) ) lo, hi = np.percentile(curves, (2.5, 97.5), axis=0) return lo, hi . Finally, we extend the regression line on the Altair scatter graph with a confidence band: . np.random.seed(42) xs = np.linspace(0, 10) ys = xs - 5 + np.random.randn(len(xs)) df = pd.DataFrame({&#39;x&#39;:xs, &#39;y&#39;:ys}) df[&#39;lo&#39;], df[&#39;hi&#39;] = confidence_bands(xs, ys, 1000) ci = alt.Chart(df).mark_area().encode( x=alt.X(&#39;x:Q&#39;, title=&#39;&#39;), y=alt.Y(&#39;lo:Q&#39;, title=&#39;&#39;), y2=alt.Y2(&#39;hi:Q&#39;, title=&#39;&#39;), color=alt.value(&#39;lightblue&#39;), opacity=alt.value(0.6) ) chart = alt.Chart(df).mark_point().encode( x=alt.X(&#39;x&#39;, title=&#39;x&#39;), y=alt.Y(&#39;y&#39;, title=&#39;y&#39;) ) chart + ci + chart.transform_regression(&#39;x&#39;, &#39;y&#39;).mark_line() . .",
            "url": "https://fastpages.fast.ai/2020/01/19/confidence-bands-with-altair-in-python.html",
            "relUrl": "/2020/01/19/confidence-bands-with-altair-in-python.html",
            "date": " • Jan 19, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "About . My name is Lode Nachtergaele. I’m an engineer by training, and currently hold the position as data scientist at Colruyt Group (a retailer in Belgium), where I spend time on writing notebooks in Python. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://fastpages.fast.ai/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  
  

  

  
  

  

  
      ,"page8": {
          "title": "",
          "content": "Warning . Do not manually save images into this folder. This is used by GitHub Actions to automatically copy images. Any images you save into this folder could be deleted at build time. .",
          "url": "https://fastpages.fast.ai/images/copied_from_nb/",
          "relUrl": "/images/copied_from_nb/",
          "date": ""
      }
      
  

  
  

}